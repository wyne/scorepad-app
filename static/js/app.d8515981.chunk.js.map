{"version":3,"sources":["src/components/PlayerScore.js","redux/CurrentGameActions.js","src/components/Rounds.js","src/screens/ScoreBoardScreen.js","src/screens/ConfigureScreen.js","redux/CurrentGameReducer.js","redux/store.js","App.js"],"names":["styles","StyleSheet","create","playerCard","flexGrow","justifyContent","alignItems","overflow","surface","position","width","borderColor","surfaceAdd","top","bottom","surfaceSubtract","name","color","fontSize","fontWeight","textAlign","alignSelf","totalScore","margin","fontVariant","roundBox","padding","borderRadius","borderWidth","roundScore","marginTop","label","roundLabel","PlayerScore","playerIndex","fontColor","cols","rows","players","useSelector","state","currentGame","scores","currentRound","dispatch","useDispatch","reduce","a","b","height","lengthScale","lengthOf","size","ms","toString","length","View","onLayout","event","e","index","data","nativeEvent","layout","type","measureView","style","backgroundColor","Text","numberOfLines","nameLengthScale","lineHeight","s","TouchableHighlight","underlayColor","activeOpacity","onPress","roundButton","paddingHorizontal","scoreEntry","Rounds","navigation","useState","roundScollOffsets","setRoundScrollOffsets","currentRoundEl","useRef","roundsScrollViewEl","useEffect","current","scrollTo","x","animated","Platform","OS","flexDirection","paddingBottom","TouchableOpacity","Feather","navigate","EvilIcons","map","player","key","maxWidth","ScrollView","horizontal","contentContainerStyle","ref","item","round","offsets","handleCurrentRoundLayout","appContainer","left","right","contentStyle","flex","flexWrap","alignContent","footerStyle","appJson","require","configScrollContainer","text","playerContainer","marginVertical","input","ConfigureScreen","isNewGame","setIsNewGame","playerWasAdded","setPlayerWasAdded","setPlayerNameHandler","setPlayerName","Button","title","uuid","TextInput","defaultValue","autoFocus","placeholder","selectTextOnFocus","onEndEditing","maxLength","onChangeText","removePlayer","removePlayerHandler","disabled","expo","version","ios","buildNumber","android","versionCode","initialState","uuidv4","currentGameReducer","action","incrementedPlayerScores","decrementedPlayerScores","prevRound","nextRound","undefined","copy","forEach","apPlayers","concat","apScores","Array","fill","rpCopy","splice","rpScores","newScores","cdCopy","cards","persistConfig","storage","AsyncStorage","whitelist","migrate","createMigrate","debug","rootReducer","combineReducers","persistReducer","store","createStore","persistor","persistStore","navigator","createStackNavigator","ScoreBoard","screen","palette","fontPalette","grid","setGrid","cardDatas","resize","setTimeout","Object","keys","newCols","countColumns","newRows","Math","ceil","lefts","filter","i","Set","navigationOptions","headerShown","Configure","headerBackTitle","initialRouteName","defaultNavigationOptions","Navigation","createAppContainer","App","loading","React","Component"],"mappings":"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","file":"static/js/app.d8515981.chunk.js","sourcesContent":["import React from 'react';\nimport { Text, View, StyleSheet, TouchableHighlight } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { s, vs, ms, mvs } from 'react-native-size-matters';\n\nimport { incPlayerRoundScore, decPlayerRoundScore, setCardData } from '../../redux/CurrentGameActions';\n\nconst PlayerScore = ({ playerIndex, color, fontColor, cols, rows }) => {\n    const players = useSelector(state => state.currentGame.players);\n    const scores = useSelector(state => state.currentGame.scores);\n    const currentRound = useSelector(state => state.currentGame.currentRound);\n    const dispatch = useDispatch();\n\n    const totalScore = scores[playerIndex].reduce(\n        (a, b) => { return (a || 0) + (b || 0); }\n    );\n    const roundScore = scores[playerIndex][currentRound] || 0\n\n    const incPlayerRoundScoreHandler = () => {\n        dispatch(incPlayerRoundScore(playerIndex));\n    }\n\n    const decPlayerRoundScoreHandler = () => {\n        dispatch(decPlayerRoundScore(playerIndex));\n    }\n\n    const measureView = (e) => {\n        if (rows == 0 && cols == 0) {\n            dispatch(setCardData(playerIndex, e.nativeEvent.layout));\n        }\n    }\n\n    let width = null;\n    let height = null;\n\n    if (rows > 0 && cols > 0) {\n        width = (100 / cols) + '%'\n        height = (100 / rows) + '%'\n    }\n\n    const lengthScale = (lengthOf, size) => {\n        return ms(size - (lengthOf).toString().length * 4, .5) - players.length;\n    }\n    const nameLengthScale = () => {\n        const lengthOf = players[playerIndex].name.toString().length\n        const baseSize = 30\n        if (lengthOf > 5) {\n            return ms(baseSize - (lengthOf).toString().length * 5, .5);\n        } else {\n            return ms(baseSize, .5)\n        }\n    }\n\n    return (\n        <View onLayout={(event) => measureView(event)}\n            style={[styles.playerCard,\n            { backgroundColor: color },\n            { width: cols === 0 ? 'auto' : width },\n            { height: rows == 0 ? 'auto' : height },\n            ]}>\n\n            <View style={{ padding: 10 }}>\n                <View style={{ justifyContent: 'center', alignItems: 'center' }}>\n                    <Text numberOfLines={1} style={[styles.name, { fontSize: nameLengthScale(), lineHeight: s(30), color: fontColor }]}>\n                        {players[playerIndex].name}\n                    </Text>\n                </View>\n                <View>\n                    <Text numberOfLines={1}\n                        style={[styles.totalScore, { color: fontColor, fontSize: lengthScale(totalScore, 60), lineHeight: ms(60, .5) },]}>\n                        {totalScore}\n                    </Text>\n                    <View style={[styles.roundBox, { borderColor: fontColor, padding: ms(5, .4) }]}>\n                        <Text style={[styles.roundScore, { fontSize: lengthScale(roundScore, 35), lineHeight: ms(35, .5), color: fontColor }]}>\n                            {roundScore}\n                        </Text>\n                        <Text style={[styles.label, styles.roundLabel, { color: fontColor }]}>\n                            Round {currentRound + 1}\n                        </Text>\n                    </View>\n                </View>\n            </View>\n\n            <TouchableHighlight style={[styles.surface, styles.surfaceAdd]}\n                underlayColor={fontColor + '30'}\n                activeOpacity={1}\n                onPress={incPlayerRoundScoreHandler}><></></TouchableHighlight>\n\n            <TouchableHighlight style={[styles.surface, styles.surfaceSubtract]}\n                underlayColor={fontColor + '30'}\n                activeOpacity={1}\n                onPress={decPlayerRoundScoreHandler}><></></TouchableHighlight>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    playerCard: {\n        flexGrow: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        overflow: 'hidden',\n    },\n    surface: {\n        position: 'absolute',\n        width: '100%',\n        borderColor: 'red',\n    },\n    surfaceAdd: {\n        top: 0,\n        bottom: '50%',\n    },\n    surfaceSubtract: {\n        top: '50%',\n        bottom: 0,\n    },\n    name: {\n        color: 'white',\n        fontSize: 50,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignSelf: 'center',\n    },\n    totalScore: {\n        margin: 2,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        color: 'white',\n        fontVariant: ['tabular-nums'],\n    },\n    roundBox: {\n        padding: 5,\n        borderRadius: 5,\n        borderWidth: 2,\n        alignSelf: 'center'\n    },\n    roundScore: {\n        fontVariant: ['tabular-nums'],\n        alignSelf: 'center',\n        fontSize: 40,\n        margin: 0,\n        marginTop: 0,\n        padding: 0,\n    },\n    label: {\n        textAlign: 'center',\n        alignSelf: 'center',\n        color: 'white',\n    },\n    roundLabel: {\n        fontVariant: ['tabular-nums'],\n        alignSelf: 'center',\n        textAlign: 'center',\n    },\n});\n\nexport default PlayerScore;","export const INC_PLAYER_ROUND_SCORE = 'INC_PLAYER_ROUND_SCORE';\nexport const DEC_PLAYER_ROUND_SCORE = 'DEC_PLAYER_ROUND_SCORE';\nexport const NEXT_ROUND = 'NEXT_ROUND'\nexport const PREV_ROUND = 'PREV_ROUND'\nexport const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const NEW_GAME = 'NEW_GAME';\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const REMOVE_PLAYER = 'REMOVE_PLAYER';\n\nexport const SET_CARD_DATA = 'SET_CARD_DATA';\nexport const RESET_CARD_DATA = 'RESET_CARD_DATA';\n\nexport const incPlayerRoundScore = (index) => {\n    return { type: INC_PLAYER_ROUND_SCORE, index: index, }\n}\n\nexport const decPlayerRoundScore = (index) => {\n    return { type: DEC_PLAYER_ROUND_SCORE, index: index, }\n}\n\nexport const nextRound = (index, round) => {\n    return { type: NEXT_ROUND }\n}\n\nexport const prevRound = (index, round) => {\n    return { type: PREV_ROUND }\n}\n\nexport const setPlayerName = (index, name) => {\n    return { type: SET_PLAYER_NAME, index: index, name: name }\n}\n\nexport const newGame = () => {\n    return { type: NEW_GAME }\n}\n\nexport const addPlayer = (name) => {\n    return { type: ADD_PLAYER, name: name }\n}\n\nexport const removePlayer = (index) => {\n    return { type: REMOVE_PLAYER, index: index }\n}\n\nexport const setCardData = (index, data) => {\n    return { type: SET_CARD_DATA, index: index, data: data }\n}\n\nexport const resetCardData = () => {\n    return { type: RESET_CARD_DATA }\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity, ScrollView, Platform } from 'react-native';\nimport { s, vs, ms, mvs } from 'react-native-size-matters';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nextRound, prevRound } from '../../redux/CurrentGameActions';\n\nimport { Feather } from '@expo/vector-icons';\nimport { EvilIcons } from '@expo/vector-icons';\n\nfunction Rounds({ navigation }) {\n    const [roundScollOffsets, setRoundScrollOffsets] = useState([]);\n\n    const dispatch = useDispatch();\n\n    const nextRoundHandler = () => {\n        dispatch(nextRound());\n    }\n\n    const prevRoundHandler = () => {\n        dispatch(prevRound());\n    }\n\n    const players = useSelector(state => state.currentGame.players);\n    const scores = useSelector(state => state.currentGame.scores);\n    const currentRound = useSelector(state => state.currentGame.currentRound);\n    const currentRoundEl = useRef()\n    const roundsScrollViewEl = useRef()\n\n    useEffect(() => {\n        roundsScrollViewEl.current.scrollTo({\n            x: roundScollOffsets[currentRound],\n            animated: Platform.OS == \"ios\" ? true : false\n        })\n    })\n\n    const handleCurrentRoundLayout = (event, round) => {\n        const offsets = [...roundScollOffsets];\n        offsets[round] = event.nativeEvent.layout.x;\n        setRoundScrollOffsets(offsets)\n    }\n\n    return (\n        <View style={{ flexDirection: 'row', backgroundColor: 'black', paddingBottom: 10 }}>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center' }}\n                onPress={prevRoundHandler} >\n                <View><Text>\n                    <Feather name=\"chevron-left\" style={[styles.roundButton, { fontSize: ms(40, .4) }]} color=\"black\" />\n                </Text></View>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={{ justifyContent: 'center' }}\n                onPress={() => { navigation.navigate(\"Configure\") }}>\n                <EvilIcons style={{ fontSize: ms(40, .4), color: 'white', textAlign: 'center' }} name=\"gear\" color=\"black\" />\n            </TouchableOpacity>\n\n            <View style={{ padding: 10, color: 'white' }}>\n                <Text style={{ color: 'white' }}> &nbsp; </Text>\n                {players.map((player, index) => (\n                    <Text key={index} style={{ color: 'white', maxWidth: 100, }}\n                        numberOfLines={1}\n                    >{player.name}</Text>\n                ))}\n            </View>\n\n            <ScrollView horizontal={true} contentContainerStyle={{ flexDirection: 'row' }} ref={roundsScrollViewEl}>\n                {scores[0].map((item, round) => (\n                    <View key={round} style={{ padding: 10 }}\n                        ref={currentRound == round ? currentRoundEl : null}\n                        onLayout={(e) => handleCurrentRoundLayout(e, round)}\n                        backgroundColor={round == currentRound ? '#111' : 'black'}>\n                        <Text style={{\n                            color: currentRound == round ? 'red' : 'yellow',\n                            fontWeight: 'bold',\n                            textAlign: 'center',\n                        }}>\n                            {round + 1}\n                        </Text>\n                        {players.map((player, playerIndex) => (\n                            <Text key={playerIndex} style={[\n                                styles.scoreEntry,\n                                { color: scores[playerIndex][round] == 0 ? '#555' : 'white' }]}>\n                                {scores[playerIndex][round]}\n                            </Text>\n                        ))}\n                    </View>\n                ))}\n            </ScrollView>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center', }}\n                onPress={nextRoundHandler} >\n                <View>\n                    <Feather name=\"chevron-right\" style={[styles.roundButton, { fontSize: ms(40, .4) }]} color=\"black\" />\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    roundButton: {\n        fontSize: 50,\n        paddingHorizontal: 10,\n        color: 'white',\n    },\n    scoreEntry: {\n        fontVariant: ['tabular-nums'],\n        textAlign: 'center',\n        color: 'white',\n    }\n});\n\nexport default Rounds;","import React, { useEffect, useState } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\n\nimport PlayerScore from '../components/PlayerScore'\nimport Rounds from '../components/Rounds';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { resetCardData } from '../../redux/CurrentGameActions';\n\nexport default function ScoreBoardScreen({ navigation }) {\n    const palette = [\"01497c\", \"c25858\", \"f5c800\", \"275436\", \"dc902c\", \"62516a\", \"755647\", \"925561\"]\n    const fontPalette = [\"FFFFFF\", \"FFFFFF\", \"000000\", \"FFFFFF\", \"FFFFFF\", \"FFFFFF\", \"FFFFFF\", \"FFFFFF\"]\n\n    const [grid, setGrid] = useState({ rows: 0, cols: 0 });\n    const players = useSelector(state => state.currentGame.players);\n    const cardDatas = useSelector(state => state.currentGame.cards);\n    const dispatch = useDispatch();\n\n    const resize = () => {\n        const fn = () => {\n            if (Object.keys(cardDatas || {}).length >= players.length) {\n                const newCols = countColumns();\n                const newRows = Math.ceil(players.length / newCols);\n                if (newRows != grid.rows || newCols != grid.cols) {\n                    setGrid({ rows: newRows, cols: newCols })\n                }\n            }\n        }\n        // Todo: this delay is necessary unfortunately.\n        setTimeout(fn, 100);\n    }\n\n    const countColumns = () => {\n        if (cardDatas === undefined) return []\n        const d = players.map((name, index) => {\n            return (cardDatas[index] || {}).x\n        })\n        const lefts = d.filter(i => i !== undefined);\n        return [...new Set(lefts)].length;\n    }\n\n    const handleResetRows = () => {\n        setGrid({ rows: 0, cols: 0 })\n    }\n\n    const handleResetCards = () => {\n        dispatch(resetCardData());\n    }\n\n    const handleEval = () => {\n        resize()\n    }\n\n    const onLayout = (e) => {\n        handleResetRows();\n        handleResetCards();\n    }\n\n    useEffect(() => {\n        resize()\n    })\n\n    return (\n        <View style={styles.appContainer}>\n            <View style={styles.contentStyle} onLayout={onLayout} >\n                {players.map((name, index) => (\n                    <PlayerScore\n                        key={index}\n                        playerIndex={index}\n                        color={'#' + palette[index % palette.length]}\n                        fontColor={'#' + fontPalette[index % palette.length]}\n                        cols={(grid.rows != 0 && grid.cols != 0) ? grid.cols : 0}\n                        rows={(grid.rows != 0 && grid.cols != 0) ? grid.rows : 0}\n                    />\n                ))}\n            </View>\n\n            {false && <View style={{ flexDirection: 'row' }}>\n                <Button onPress={handleResetRows} title=\"reset rows\"></Button>\n                <Button onPress={handleEval} title=\"eval\"></Button>\n                <Button onPress={handleResetCards} title=\"reset card data\"></Button>\n            </View>}\n\n            <Rounds style={styles.footerStyle} navigation={navigation} />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    appContainer: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        position: 'absolute',\n    },\n    contentStyle: {\n        flex: 1,\n        flexGrow: 1,\n        flexWrap: 'wrap',\n        alignContent: 'stretch',\n        flexDirection: 'column',\n        maxWidth: '100%',\n        backgroundColor: '#000000'\n    },\n    footerStyle: {\n        flex: 1,\n    }\n});\n\n","import React, { useState } from 'react';\nimport { Platform, Text, View, ScrollView, StyleSheet, TextInput, Button, } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setPlayerName, newGame, addPlayer, removePlayer } from '../../redux/CurrentGameActions';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nconst appJson = require('../../app.json');\n\nconst ConfigureScreen = () => {\n    const [isNewGame, setIsNewGame] = useState(false)\n    const [playerWasAdded, setPlayerWasAdded] = useState(false)\n\n    const players = useSelector(state => state.currentGame.players);\n    const dispatch = useDispatch();\n\n    const setPlayerNameHandler = (index, name) => {\n        dispatch(setPlayerName(index, name));\n        setPlayerWasAdded(false)\n    }\n\n    const newGameHandler = () => {\n        dispatch(newGame());\n        setIsNewGame(true);\n    }\n\n    const addPlayerHandler = () => {\n        dispatch(addPlayer('Player ' + (players.length + 1)));\n        setPlayerWasAdded(true)\n    }\n\n    const removePlayerHandler = (index) => {\n        dispatch(removePlayer(index));\n    }\n\n    return (\n        <KeyboardAwareScrollView style={styles.configScrollContainer}>\n            <View style={{ maxWidth: 500, alignSelf: 'center' }}>\n\n                <Text style={styles.text}>Tap the top half of a player's card to add a point. Tap the bottom half to subtract.</Text>\n                <Text style={styles.text}>Tip: To add or subtract faster, try tapping with two alternating fingers.</Text>\n\n                <View style={{ margin: 10 }}>\n                    <Button title=\"New Game\" onPress={newGameHandler} />\n                    {isNewGame &&\n                        <Text style={{ textAlign: 'center' }}>Scores have been reset!</Text>\n                    }\n                </View>\n\n                {players.map((player, index) => (\n                    <View style={styles.playerContainer} key={player.uuid}>\n                        <Text style={{ fontSize: 20, padding: 5 }}>{index + 1}</Text>\n                        <TextInput\n                            defaultValue={index == players.length - 1 && playerWasAdded ? null : player.name}\n                            style={styles.input}\n                            autoFocus={index == players.length - 1 && playerWasAdded}\n                            placeholder={'Player ' + (index + 1)}\n                            selectTextOnFocus={true}\n                            onEndEditing={(e) => {\n                                if (e.nativeEvent.text == \"\") {\n                                    setPlayerNameHandler(index, 'Player ' + (index + 1));\n                                }\n                            }}\n                            maxLength={15}\n                            onChangeText={(text) => setPlayerNameHandler(index, text)} />\n                        {index > 0 &&\n                            <Button title=\"Delete\" onPress={() => removePlayerHandler(index)}></Button>\n                        }\n                    </View>\n                ))}\n\n                <View style={{ margin: 10 }}>\n                    <Button title=\"Add Player\"\n                        disabled={players.length >= 8}\n                        onPress={addPlayerHandler} />\n                </View>\n\n                {players.length >= 8 &&\n                    <Text style={styles.text}>Max players reached.</Text>\n                }\n\n                <View style={{ margin: 70 }}><Text>&nbsp;</Text></View>\n\n                <View style={{ marginVertical: 30 }}>\n                    <Text style={{ textAlign: 'center' }} >\n                        Version {appJson.expo.version}\n                    </Text>\n                    {Platform.OS == 'ios' &&\n                        <Text style={{ textAlign: 'center' }}>{Platform.OS} build {appJson.expo.ios.buildNumber} </Text>\n                    }\n                    {Platform.OS == 'android' &&\n                        <Text style={{ textAlign: 'center' }}>{Platform.OS} build {appJson.expo.android.versionCode} </Text>\n                    }\n                </View>\n\n            </View>\n        </KeyboardAwareScrollView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    configScrollContainer: {\n        flex: 1,\n        padding: 20,\n        paddingBottom: 50,\n        backgroundColor: 'white',\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 20,\n        margin: 5,\n    },\n    playerContainer: {\n        margin: 10,\n        marginVertical: 5,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        flexDirection: 'row',\n    },\n    input: {\n        flex: 1,\n        borderWidth: 1,\n        borderColor: 'black',\n        backgroundColor: 'white',\n        borderRadius: 5,\n        fontSize: 20,\n        padding: 5,\n        paddingHorizontal: 10,\n        margin: 5,\n    },\n});\n\nexport default ConfigureScreen;","import { v4 as uuidv4 } from 'uuid';\nimport {\n    INC_PLAYER_ROUND_SCORE,\n    DEC_PLAYER_ROUND_SCORE,\n    NEXT_ROUND, PREV_ROUND,\n    SET_PLAYER_NAME, NEW_GAME,\n    ADD_PLAYER,\n    REMOVE_PLAYER,\n    SET_CARD_DATA,\n    RESET_CARD_DATA\n} from \"./CurrentGameActions\"\n\nconst initialState = {\n    players: [\n        { name: 'Player 1', uuid: uuidv4() },\n        { name: 'Player 2', uuid: uuidv4() },\n    ],\n    scores: [\n        [0],\n        [0],\n    ],\n    currentRound: 0,\n}\n\nconst currentGameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INC_PLAYER_ROUND_SCORE:\n            const incrementedPlayerScores = [...state.scores];\n            incrementedPlayerScores[action.index][state.currentRound] =\n                (incrementedPlayerScores[action.index][state.currentRound] || 0) + 1;\n            return { ...state, scores: incrementedPlayerScores };\n\n        case DEC_PLAYER_ROUND_SCORE:\n            const decrementedPlayerScores = [...state.scores];\n            decrementedPlayerScores[action.index][state.currentRound] =\n                (decrementedPlayerScores[action.index][state.currentRound] || 0) - 1;\n            return { ...state, scores: decrementedPlayerScores };\n\n        case PREV_ROUND:\n            if (state.currentRound - 1 < 0) {\n                return state;\n            } else {\n                const prevRound = state.currentRound - 1;\n                return { ...state, currentRound: prevRound };\n            }\n\n        case NEXT_ROUND:\n            const nextRound = state.currentRound + 1;\n\n            // TODO: clean up\n            if (state.scores[0][nextRound] === undefined) {\n                const copy = [...state.scores];\n\n                state.players.forEach((name, index) => {\n                    copy[index][nextRound] = 0;\n                })\n                return {\n                    ...state,\n                    scores: copy,\n                    currentRound: nextRound\n                };\n            }\n\n            return {\n                ...state,\n                currentRound: nextRound\n            };\n\n        case SET_PLAYER_NAME:\n            let copy = [...state.players];\n            copy[action.index] = { ...copy[action.index], name: action.name, };\n            return { ...state, players: copy };\n\n        case ADD_PLAYER:\n            let apPlayers = [...state.players].concat({\n                name: action.name,\n                uuid: uuidv4()\n            });\n            const apScores = [...state.scores].concat([\n                Array(state.scores[0].length).fill(0)\n            ]);\n            return { ...state, players: apPlayers, scores: apScores };\n\n        case REMOVE_PLAYER:\n            let rpCopy = [...state.players];\n            rpCopy.splice(action.index, 1)\n\n            const rpScores = [...state.scores];\n            rpScores.splice(action.index, 1)\n            return { ...state, players: rpCopy, scores: rpScores };\n\n        case NEW_GAME:\n            let newScores = [];\n            state.players.forEach((name, index) => {\n                newScores[index] = [0]\n            })\n            return {\n                ...state,\n                scores: newScores,\n                currentRound: 0,\n            };\n\n        case SET_CARD_DATA:\n            let cdCopy = { ...state.cards };\n            cdCopy[action.index] = action.data;\n            return {\n                ...state,\n                cards: cdCopy\n            }\n\n        case RESET_CARD_DATA:\n            return {\n                ...state,\n                cards: {},\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default currentGameReducer;","import { createStore, combineReducers } from 'redux';\nimport currentGameReducer from './CurrentGameReducer';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport createMigrate from 'redux-persist/es/createMigrate';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst migrations = {\n    // 0: (state) => {\n    // const players = state.players\n    // return {\n    //     ...state,\n    //     players: [\n    //         { name: 'player 1', uuid: uuidv4() },\n    //         { name: 'player 2', uuid: uuidv4() },\n    //     ],\n    // }\n    // }\n}\nconst persistConfig = {\n    key: 'root',\n    version: '0',\n    storage: AsyncStorage,\n    whitelist: ['players', 'scores', 'currentRound',],\n    migrate: createMigrate(migrations, { debug: true }),\n};\n\nconst rootReducer = combineReducers({\n    currentGame: persistReducer(persistConfig, currentGameReducer),\n})\n\nexport const store = createStore(rootReducer);\nexport const persistor = persistStore(store);","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport ScoreBoardScreen from \"./src/screens/ScoreBoardScreen\";\nimport ConfigureScreen from \"./src/screens/ConfigureScreen\";\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nconst navigator = createStackNavigator(\n    {\n        ScoreBoard: {\n            screen: ScoreBoardScreen,\n            navigationOptions: ({ navigation }) => ({\n                headerShown: false,\n            }),\n        },\n        Configure: {\n            screen: ConfigureScreen,\n            navigationOptions: ({ navigation }) => ({\n                title: \"Configure\",\n                headerBackTitle: \"Back\"\n            }),\n        },\n    },\n    {\n        initialRouteName: \"ScoreBoard\",\n        defaultNavigationOptions: {\n            title: \"Home\",\n        },\n    }\n);\n\nlet Navigation = createAppContainer(navigator);\n\n// Render the app container component with the provider around it\nexport default class App extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <Navigation />\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["redux/CurrentGameActions.js","src/components/PlayerScore.js","src/components/Rounds.js","src/screens/ScoreBoardScreen.js","src/screens/ConfigureScreen.js","redux/CurrentGameReducer.js","redux/store.js","App.js"],"names":["removePlayer","index","type","styles","StyleSheet","create","playerCard","padding","flexGrow","justifyContent","alignItems","surface","position","width","borderColor","surfaceAdd","top","bottom","surfaceSubtract","name","color","fontSize","fontWeight","textAlign","alignSelf","score","margin","fontVariant","roundScore","marginTop","label","roundLabel","PlayerScore","playerIndex","fontColor","scores","useSelector","state","currentGame","players","currentRound","dispatch","useDispatch","View","style","backgroundColor","onLayout","event","Text","length","adjustsFontSizeToFit","numberOfLines","reduce","a","b","borderRadius","borderWidth","TouchableOpacity","onPress","incPlayerRoundScore","decPlayerRoundScore","roundButton","paddingHorizontal","scoreEntry","Rounds","navigation","flexDirection","paddingBottom","Feather","navigate","EvilIcons","map","player","key","ScrollView","horizontal","contentContainerStyle","item","round","appContainer","left","right","contentStyle","flex","flexWrap","alignContent","maxWidth","footerStyle","configContainer","text","playerContainer","marginVertical","input","ConfigureScreen","Button","title","uuid","TextInput","defaultValue","maxLength","onChangeText","setPlayerName","setPlayerNameHandler","removePlayerHandler","disabled","initialState","uuidv4","currentGameReducer","action","incrementedPlayerScores","decrementedPlayerScores","prevRound","nextRound","undefined","copy","forEach","apPlayers","concat","apScores","Array","fill","rpCopy","splice","rpScores","newScores","persistConfig","storage","AsyncStorage","rootReducer","combineReducers","persistReducer","store","createStore","persistor","persistStore","navigator","createStackNavigator","ScoreBoard","screen","palette","fontPalette","navigationOptions","headerShown","Configure","headerBackTitle","initialRouteName","defaultNavigationOptions","Navigation","createAppContainer","App","loading","React","Component","container"],"mappings":"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","file":"static/js/app.07eb1e1c.chunk.js","sourcesContent":["export const INC_PLAYER_ROUND_SCORE = 'INC_PLAYER_ROUND_SCORE';\nexport const DEC_PLAYER_ROUND_SCORE = 'DEC_PLAYER_ROUND_SCORE';\nexport const NEXT_ROUND = 'NEXT_ROUND'\nexport const PREV_ROUND = 'PREV_ROUND'\nexport const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const NEW_GAME = 'NEW_GAME';\nexport const ADD_PLAYER = 'ADD_PLAYER';\nexport const REMOVE_PLAYER = 'REMOVE_PLAYER';\n\nexport const incPlayerRoundScore = (index) => {\n    return { type: INC_PLAYER_ROUND_SCORE, index: index, }\n}\n\nexport const decPlayerRoundScore = (index) => {\n    return { type: DEC_PLAYER_ROUND_SCORE, index: index, }\n}\n\nexport const nextRound = (index, round) => {\n    return { type: NEXT_ROUND }\n}\n\nexport const prevRound = (index, round) => {\n    return { type: PREV_ROUND }\n}\n\nexport const setPlayerName = (index, name) => {\n    return { type: SET_PLAYER_NAME, index: index, name: name }\n}\n\nexport const newGame = () => {\n    return { type: NEW_GAME }\n}\n\nexport const addPlayer = (name) => {\n    return { type: ADD_PLAYER, name: name }\n}\n\nexport const removePlayer = (index) => {\n    return { type: REMOVE_PLAYER, index: index }\n}","import React from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dimensions } from 'react-native';\n\nimport { incPlayerRoundScore, decPlayerRoundScore } from '../../redux/CurrentGameActions';\n\nfunction PlayerScore({ playerIndex, color, fontColor }) {\n    const scores = useSelector(state => state.currentGame.scores);\n    const players = useSelector(state => state.currentGame.players);\n    const currentRound = useSelector(state => state.currentGame.currentRound);\n\n    const dispatch = useDispatch();\n\n    const incPlayerRoundScoreHandler = () => {\n        dispatch(incPlayerRoundScore(playerIndex));\n    }\n\n    const decPlayerRoundScoreHandler = () => {\n        dispatch(decPlayerRoundScore(playerIndex));\n    }\n\n    let cardHeights = null;\n    const measureView = (e) => {\n        // cardHeights = e.nativeEvent.layout.height;\n        // console.log(\"card height\", cardHeights);\n    }\n\n    return (\n        <View style={[\n            styles.playerCard,\n            { backgroundColor: '#' + color },\n            // { maxWidth: Math.ceil(Dimensions.get('window').width / Math.ceil(players.length / 3)) + 20 },\n            // { maxWidth: '25%' }\n            // { flexBasis: '50%' }\n            // rows = (content height + 1) / cardHeights\n            // 100 / (ceil(count / rows)\n        ]}\n            onLayout={(playerIndex <= 1) ? (event) => measureView(event) : false}\n        >\n\n            <View style={{ justifyContent: 'center', alignItems: 'center' }}>\n                <Text style={[\n                    styles.name,\n                    {\n                        fontSize: players.length > 4 ? 30 : 50,\n                        color: '#' + fontColor\n                    },\n                    // { maxWidth: players.length > 4 ? Dimensions.get('window').width / 4 : Dimensions.get('window').width / 3 },\n                    // { minHeight: players.length > 4 ? '25%' : Dimensions.get('window').width / 3 },\n                ]}\n                    adjustsFontSizeToFit={true}\n                    numberOfLines={1}\n                >\n                    {players[playerIndex].name}\n                </Text>\n            </View>\n            <View>\n                <Text style={[\n                    styles.score,\n                    {\n                        fontSize: players.length > 4 ? 50 : 90,\n                        color: '#' + fontColor\n                    }\n                ]}>\n                    {scores[playerIndex].reduce((a, b) => { return (a || 0) + (b || 0); })}\n                </Text>\n                <View style={{\n                    padding: 5,\n                    borderRadius: 5,\n                    borderWidth: 2,\n                    borderColor: '#' + fontColor,\n                    alignSelf: 'center',\n                }}>\n                    <Text style={[\n                        styles.score,\n                        styles.roundScore,\n                        {\n                            fontSize: players.length > 4 ? 30 : 40,\n                            color: '#' + fontColor\n                        }\n                    ]}>{scores[playerIndex][currentRound] || 0}</Text>\n                    <Text style={[\n                        styles.label,\n                        styles.roundLabel],\n                        { color: '#' + fontColor }\n                    }>\n                        Round {currentRound + 1}\n                    </Text>\n                </View>\n            </View>\n\n            <TouchableOpacity style={[styles.surface, styles.surfaceAdd]}\n                onPress={incPlayerRoundScoreHandler}\n            />\n            <TouchableOpacity style={[styles.surface, styles.surfaceSubtract]}\n                onPress={decPlayerRoundScoreHandler}\n            />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    playerCard: {\n        padding: 10,\n        flexGrow: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    surface: {\n        position: 'absolute',\n        width: '100%',\n        borderColor: 'red',\n    },\n    surfaceAdd: {\n        top: 0,\n        bottom: '50%',\n    },\n    surfaceSubtract: {\n        top: '50%',\n        bottom: 0,\n    },\n    name: {\n        color: 'white',\n        fontSize: 50,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignSelf: 'center',\n    },\n    score: {\n        margin: 2,\n        fontSize: 90,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        color: 'white',\n        fontVariant: ['tabular-nums'],\n    },\n    roundScore: {\n        fontSize: 40,\n        margin: 0,\n        marginTop: 0,\n        padding: 0,\n    },\n    label: {\n        textAlign: 'center',\n        color: 'white',\n    },\n    roundLabel: {\n        fontVariant: ['tabular-nums'],\n    },\n});\n\nexport default PlayerScore;","import React from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nextRound, prevRound } from '../../redux/CurrentGameActions';\n\nimport { Feather } from '@expo/vector-icons';\nimport { EvilIcons } from '@expo/vector-icons';\n\nfunction Rounds({ navigation }) {\n    const dispatch = useDispatch();\n\n    const nextRoundHandler = () => {\n        dispatch(nextRound());\n    }\n\n    const prevRoundHandler = () => {\n        dispatch(prevRound());\n    }\n\n    const players = useSelector(state => state.currentGame.players);\n    const scores = useSelector(state => state.currentGame.scores);\n    const currentRound = useSelector(state => state.currentGame.currentRound);\n\n    return (\n        <View style={{ flexDirection: 'row', backgroundColor: 'black', paddingBottom: 10 }}>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center' }}\n                onPress={prevRoundHandler} >\n                <View><Text>\n                    <Feather name=\"chevron-left\" style={styles.roundButton} color=\"black\" />\n                </Text></View>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={{ justifyContent: 'center' }}\n                onPress={() => { navigation.navigate(\"Configure\") }}>\n                <EvilIcons style={{ fontSize: 50, color: 'white', textAlign: 'center' }} name=\"gear\" color=\"black\" />\n            </TouchableOpacity>\n\n            <View style={{ padding: 10, color: 'white' }}>\n                <Text style={{ color: 'white' }}>\n                    &nbsp;\n                </Text>\n                {players.map((player, index) => (\n                    <Text key={index} style={{ color: 'white' }}>{player.name}</Text>\n                ))}\n            </View>\n\n            <ScrollView horizontal={true} contentContainerStyle={{ flexDirection: 'row' }}>\n\n                {scores[0].map((item, round) => (\n                    <View key={round} style={{ padding: 10 }}>\n                        <Text style={{\n                            color: currentRound == round ? 'red' : 'yellow',\n                            fontWeight: 'bold',\n                            textAlign: 'center',\n                        }}>{round + 1}</Text>\n                        {players.map((player, playerIndex) => (\n                            <Text key={playerIndex} style={[\n                                styles.scoreEntry,\n                                { color: scores[playerIndex][round] == 0 ? '#555' : 'white' }\n                            ]\n                            }>\n                                {scores[playerIndex][round]}\n                            </Text>\n                        ))}\n                    </View>\n                ))}\n            </ScrollView>\n\n            <TouchableOpacity\n                style={{ justifyContent: 'center', }}\n                onPress={nextRoundHandler} >\n                <View>\n                    <Feather name=\"chevron-right\" style={styles.roundButton} color=\"black\" />\n                </View>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    roundButton: {\n        fontSize: 50,\n        paddingHorizontal: 10,\n        color: 'white',\n    },\n    scoreEntry: {\n        fontVariant: ['tabular-nums'],\n        textAlign: 'center',\n        color: 'white',\n    }\n});\n\nexport default Rounds;","import React, { useState } from 'react';\nimport { Text, View, StyleSheet, } from 'react-native';\nimport PlayerScore from '../components/PlayerScore'\nimport Rounds from '../components/Rounds';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function ScoreBoardScreen({ navigation }) {\n    // https://coolors.co/7d9cd4-de8383-a4d4a7-c188d1-8787d4-a1b8e3-d67187\n    // const palette = [\"7d9cd4\", \"de8383\", \"a4d4a7\", \"c188d1\", \"8787d4\", \"a1b8e3\", \"d67187\"]\n    const palette = [\"01497c\", \"c25858\", \"f5c800\", \"275436\"]\n    const fontPalette = [\"FFFFFF\", \"FFFFFF\", \"000000\", \"FFFFFF\"]\n\n\n    // https://coolors.co/f4f1de-e07a5f-8f5d5d-3d405b-5f797b-81b29a-babf95-f2cc8f\n    // const palette = [\"e07a5f\", \"8f5d5d\", \"3d405b\", \"5f797b\", \"81b29a\", \"babf95\", \"f2cc8f\"]\n\n    const players = useSelector(state => state.currentGame.players);\n\n    const measureView = (e) => {\n        // console.log(e.nativeEvent.layout.height);\n        // set in redux, don't whitelist it\n    }\n\n    return (\n        <View style={styles.appContainer}>\n            <View style={styles.contentStyle}\n                onLayout={(event) => measureView(event)}\n            >\n                {players.map((name, index) => (\n                    <PlayerScore\n                        key={index}\n                        playerIndex={index}\n                        color={palette[index % palette.length]}\n                        fontColor={fontPalette[index % palette.length]}\n                    />\n                ))}\n            </View>\n            <Rounds\n                style={styles.footerStyle}\n                navigation={navigation}\n            />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    appContainer: {\n        // paddingTop: Constants.statusBarHeight,\n        // height: Platform.OS === 'web' ? '100vh' : '100%',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        position: 'absolute',\n    },\n    contentStyle: {\n        flex: 1,\n        flexGrow: 1,\n        flexWrap: 'wrap',\n        alignContent: 'stretch',\n        flexDirection: 'column',\n        maxWidth: '100%',\n    },\n    footerStyle: {\n        flex: 1,\n    }\n});\n\n","import React, { useState } from 'react';\nimport { Platform, Text, View, ScrollView, StyleSheet, TextInput, Button, } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setPlayerName, newGame, addPlayer, removePlayer } from '../../redux/CurrentGameActions';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nconst ConfigureScreen = ({ navigation }) => {\n    const players = useSelector(state => state.currentGame.players);\n\n    const dispatch = useDispatch();\n\n    const setPlayerNameHandler = (index, name) => {\n        dispatch(setPlayerName(index, name));\n    }\n\n    const newGameHandler = () => {\n        dispatch(newGame());\n    }\n\n    const addPlayerHandler = () => {\n        dispatch(addPlayer('Player ' + (players.length + 1)));\n    }\n\n    const removePlayerHandler = (index) => {\n        dispatch(removePlayer(index));\n    }\n\n    const saveHandler = () => {\n        dispatch(removePlayer(index));\n    }\n\n    return (<>\n        <KeyboardAwareScrollView style={styles.configContainer}>\n\n            <Text style={styles.text}>Tap the top half of a player's card to add a point. Tap the bottom half to subtract.</Text>\n            <Text style={styles.text}>Tip: To add or subtract faster, try tapping with two alternating fingers.</Text>\n\n            <View style={{ margin: 10 }}>\n                <Button title=\"New Game\" onPress={newGameHandler} />\n            </View>\n\n            {players.map((player, index) => (\n                <View style={styles.playerContainer} key={player.uuid}>\n                    <Text style={{ fontSize: 20, padding: 5 }}>{index + 1}</Text>\n                    <TextInput\n                        defaultValue={player.name}\n                        style={styles.input}\n                        maxLength={20}\n                        onChangeText={(text) => setPlayerNameHandler(index, text)}\n                    />\n                    {index > 0 &&\n                        <Button title=\"Delete\" onPress={() => removePlayerHandler(index)}></Button>\n                    }\n                </View>\n            ))}\n\n            <View style={{ margin: 10 }}>\n                <Button title=\"Add Player\"\n                    disabled={players.length >= 12}\n                    onPress={addPlayerHandler} />\n            </View>\n\n            {players.length >= 12 &&\n                <Text style={styles.text}>Max players reached.</Text>\n            }\n\n            <View style={{ margin: 70 }}><Text>&nbsp;</Text></View>\n\n        </KeyboardAwareScrollView>\n    </>);\n}\n\nconst styles = StyleSheet.create({\n    configContainer: {\n        flex: 1,\n        padding: 20,\n        paddingBottom: 50,\n        backgroundColor: 'white',\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: 20,\n        margin: 5,\n    },\n    playerContainer: {\n        margin: 10,\n        marginVertical: 5,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        flexDirection: 'row',\n    },\n    input: {\n        flex: 1,\n        borderWidth: 1,\n        borderColor: 'black',\n        backgroundColor: 'white',\n        borderRadius: 5,\n        fontSize: 20,\n        padding: 5,\n        paddingHorizontal: 10,\n        margin: 5,\n    },\n});\n\nexport default ConfigureScreen;","import { v4 as uuidv4 } from 'uuid';\nimport {\n    INC_PLAYER_ROUND_SCORE,\n    DEC_PLAYER_ROUND_SCORE,\n    NEXT_ROUND, PREV_ROUND,\n    SET_PLAYER_NAME, NEW_GAME,\n    ADD_PLAYER,\n    REMOVE_PLAYER\n} from \"./CurrentGameActions\"\n\nconst initialState = {\n    players: [\n        { name: 'Player 1', uuid: uuidv4() },\n        { name: 'Player 2', uuid: uuidv4() },\n    ],\n    scores: [\n        [0],\n        [0],\n    ],\n    currentRound: 0,\n}\n\nconst currentGameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INC_PLAYER_ROUND_SCORE:\n            const incrementedPlayerScores = [...state.scores];\n            incrementedPlayerScores[action.index][state.currentRound] =\n                (incrementedPlayerScores[action.index][state.currentRound] || 0) + 1;\n            return { ...state, scores: incrementedPlayerScores };\n\n        case DEC_PLAYER_ROUND_SCORE:\n            const decrementedPlayerScores = [...state.scores];\n            decrementedPlayerScores[action.index][state.currentRound] =\n                (decrementedPlayerScores[action.index][state.currentRound] || 0) - 1;\n            return { ...state, scores: decrementedPlayerScores };\n\n        case PREV_ROUND:\n            if (state.currentRound - 1 < 0) {\n                return state;\n            } else {\n                const prevRound = state.currentRound - 1;\n                return { ...state, currentRound: prevRound };\n            }\n\n        case NEXT_ROUND:\n            const nextRound = state.currentRound + 1;\n\n            // TODO: clean up\n            if (state.scores[0][nextRound] === undefined) {\n                const copy = [...state.scores];\n\n                state.players.forEach((name, index) => {\n                    copy[index][nextRound] = 0;\n                })\n                return {\n                    ...state,\n                    scores: copy,\n                    currentRound: nextRound\n                };\n            }\n\n            return {\n                ...state,\n                currentRound: nextRound\n            };\n\n        case SET_PLAYER_NAME:\n            let copy = [...state.players];\n            copy[action.index] = { ...copy[action.index], name: action.name };\n            return { ...state, players: copy };\n\n        case ADD_PLAYER:\n            let apPlayers = [...state.players].concat({\n                name: action.name,\n                uuid: uuidv4()\n            });\n            const apScores = [...state.scores].concat([\n                Array(state.scores[0].length).fill(0)\n            ]);\n            return { ...state, players: apPlayers, scores: apScores };\n\n        case REMOVE_PLAYER:\n            let rpCopy = [...state.players];\n            rpCopy.splice(action.index, 1)\n\n            const rpScores = [...state.scores];\n            rpScores.splice(action.index, 1)\n            return { ...state, players: rpCopy, scores: rpScores };\n\n        case NEW_GAME:\n            let newScores = [];\n            state.players.forEach((name, index) => {\n                newScores[index] = [0]\n            })\n            return {\n                ...state,\n                scores: newScores,\n                currentRound: 0,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default currentGameReducer;","import { createStore, combineReducers } from 'redux';\nimport currentGameReducer from './CurrentGameReducer';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistStore, persistReducer } from 'redux-persist';\n\nconst persistConfig = {\n    key: 'root',\n    storage: AsyncStorage,\n};\n\nconst rootReducer = combineReducers({\n    currentGame: persistReducer(persistConfig, currentGameReducer),\n})\n\nexport const store = createStore(rootReducer);\nexport const persistor = persistStore(store);","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Provider } from 'react-redux';\n\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport ScoreBoardScreen from \"./src/screens/ScoreBoardScreen\";\nimport ConfigureScreen from \"./src/screens/ConfigureScreen\";\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nconst navigator = createStackNavigator(\n    {\n        ScoreBoard: {\n            screen: ScoreBoardScreen,\n            navigationOptions: ({ navigation }) => ({\n                headerShown: false,\n            }),\n        },\n        Configure: {\n            screen: ConfigureScreen,\n            // Optional: Override the `navigationOptions` for the screen\n            navigationOptions: ({ navigation }) => ({\n                title: \"Configure\",\n                headerBackTitle: \"Back\"\n            }),\n        },\n    },\n    {\n        initialRouteName: \"ScoreBoard\",\n        defaultNavigationOptions: {\n            title: \"Home\",\n        },\n    }\n);\n\nlet Navigation = createAppContainer(navigator);\n\n// Render the app container component with the provider around it\nexport default class App extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <Navigation />\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n"],"sourceRoot":""}